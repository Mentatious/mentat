- hosts: localhost
  gather_facts: no

  tasks:
    - include_vars: common_vars.yml
      tags:
        - always

    - name: instantiate supervisor conf template
      template: src=../conf/supervisor.conf dest=./supervisor.conf
      tags:
        - always

    - name: instantiate logrotate conf templates
      template: src=../conf/logrotate.conf dest=./{{ item }}.logrotate
      with_items: "{{ binary_names }}"
      tags:
        - always

    # TODO: exclude Quicklisp, see:
    # https://www.darkchestnut.com/2016/dont-put-quicklisp-in-your-binary-just-because-a-library-demands-it/
    # https://www.darkchestnut.com/2016/keep-quicklisp-and-qlot-out-of-your-application-binary/

    - name: build xmpp binary
      shell: "sbcl --eval \"(ql:quickload 'mentat-xmpp)\" --eval \"(mentat-xmpp::save-image-xmpp-bot)\""
      tags:
        - bot

    - name: build notifier binary
      shell: "sbcl --eval \"(ql:quickload 'mentat-notifier)\" --eval \"(mentat-notifier::save-image-notifier)\""
      tags:
        - notifier

    - name: build restapi binary
      shell: "sbcl --eval \"(ql:quickload 'mentat-restapi)\" --eval \"(mentat-restapi::save-image-restapi)\""
      tags:
        - restapi

    - name: build webserver binary
      shell: "sbcl --eval \"(ql:quickload 'mentat-webserver)\" --eval \"(mentat-webserver::save-image-webserver)\""
      tags:
        - webserver

- hosts: botservers
  gather_facts: no

  tasks:
    - include_vars: common_vars.yml
      tags:
        - always

    - name: install packages on remote server
      apt: name={{ item }} state=present
      with_items:
        - mongodb
        - supervisor
        - logrotate
      become: yes
      tags:
        - infra

    - name: check if supervisor daemon is running
      service: name=supervisor state=started
      become: yes
      tags:
        - infra

    - name: check if mongodb is up and running on remote server
      service: name=mongodb state=started
      become: yes
      tags:
        - infra

    - name: remove old xmpp remote binary
      file:
        path=/home/{{ username }}/{{ xmpp_binary_name }}
        state=absent
      tags:
        - bot

    - name: copy compiled xmpp binary to remote server
      copy: src=../deploy/{{ xmpp_binary_name }} dest=/home/{{ username }}
      tags:
        - bot

    - name: copy xmpp config to remote server
      copy: src=../src/bot/config.lisp dest=/home/{{ username }}/xmpp-config.lisp
      tags:
        - bot

    - name: set xmpp binary attrs
      file: path=/home/{{ username }}/{{ xmpp_binary_name }} mode=u+rwx
      tags:
        - bot

    - name: check if mentat-xmpp service exists
      shell: "if supervisorctl status | grep -q {{ xmpp_binary_name }};   then echo true;   else echo false; fi;"
      become: yes
      register: bot_enabled
      tags:
        - bot

    - name: restart mentat-xmpp service on remote server
      supervisorctl: name={{ xmpp_binary_name }} state=restarted
      become: yes
      when: bot_enabled.stdout | bool
      tags:
        - bot

    - name: remove old notifier remote binary
      file:
        path=/home/{{ username }}/{{ notifier_binary_name }}
        state=absent
      tags:
        - notifier

    - name: copy compiled notifier binary to remote server
      copy: src=../deploy/{{ notifier_binary_name }} dest=/home/{{ username }}
      tags:
        - notifier

    - name: copy notifier config to remote server
      copy: src=../src/notifier/config.lisp dest=/home/{{ username }}/notifier-config.lisp
      tags:
        - notifier

    - name: set notifier binary attrs
      file: path=/home/{{ username }}/{{ notifier_binary_name }} mode=u+rwx
      tags:
        - notifier

    - name: check if mentat-notifier service exists
      shell: "if supervisorctl status | grep -q {{ notifier_binary_name }};   then echo true;   else echo false; fi;"
      become: yes
      register: notifier_enabled
      tags:
        - notifier

    - name: restart mentat-notifier service on remote server
      supervisorctl: name={{ notifier_binary_name }} state=restarted
      become: yes
      when: notifier_enabled.stdout | bool
      tags:
        - notifier

    - name: remove old restapi remote binary
      file:
        path=/home/{{ username }}/{{ restapi_binary_name }}
        state=absent
      tags:
        - restapi

    - name: copy compiled restapi binary to remote server
      copy: src=../deploy/{{ restapi_binary_name }} dest=/home/{{ username }}
      tags:
        - restapi

    - name: set restapi binary attrs
      file: path=/home/{{ username }}/{{ restapi_binary_name }} mode=u+rwx
      tags:
        - restapi

    - name: copy restapi config to remote server
      copy: src=../src/restapi/config.lisp dest=/home/{{ username }}/restapi-config.lisp
      tags:
        - restapi

    - name: check if mentat-restapi service exists
      shell: "if supervisorctl status | grep -q {{ restapi_binary_name }};   then echo true;   else echo false; fi;"
      become: yes
      register: restapi_enabled
      tags:
        - restapi

    - name: restart mentat-restapi service on remote server
      supervisorctl: name={{ restapi_binary_name }} state=restarted
      become: yes
      when: restapi_enabled.stdout | bool
      tags:
        - restapi

    - name: remove old webserver remote binary
      file:
        path=/home/{{ username }}/{{ webserver_binary_name }}
        state=absent
      tags:
        - webserver

    - name: copy compiled webserver binary to remote server
      copy: src=../deploy/{{ webserver_binary_name }} dest=/home/{{ username }}
      tags:
        - webserver

    - name: copy webserver config to remote server
      copy: src=../src/webserver/config.lisp dest=/home/{{ username }}/webserver-config.lisp
      tags:
        - webserver

    - name: set webserver binary attrs
      file: path=/home/{{ username }}/{{ webserver_binary_name }} mode=u+rwx
      tags:
        - webserver

    - name: check if mentat-webserver service exists
      shell: "if supervisorctl status | grep -q {{ webserver_binary_name }};   then echo true;   else echo false; fi;"
      become: yes
      register: webserver_enabled
      tags:
        - webserver

    - name: restart mentat-webserver service on remote server
      supervisorctl: name={{ webserver_binary_name }} state=restarted
      become: yes
      when: webserver_enabled.stdout | bool
      tags:
        - webserver

    - name: copy logrotate configs to remote server
      copy:
        src=../conf/{{ item }}.logrotate
        dest=/etc/logrotate.d/{{ item }}
        mode=0644
      with_items: "{{ binary_names }}"
      become: yes

    - name: copy supervisor conf
      copy: src=./supervisor.conf dest=/etc/supervisor/conf.d/{{ supervisor_conf }}
      become: yes
      tags:
        - always

    - name: reread supervisor conf
      shell: supervisorctl reread
      become: yes
      tags:
        - always

- hosts: localhost

  tasks:
    - name: cleanup recently built binaries
      file: path=./{{ item }} state=absent
      with_items: "{{ binary_names }}"
      tags:
        - always

    - name: cleanup instantiated logrotate configs
      file: path=./{{ item }}.logrotate state=absent
      with_items: "{{ binary_names }}"
      tags:
        - always

    - name: cleanup supervisor conf file
      file: path=./supervisor.conf state=absent
      tags:
        - always
